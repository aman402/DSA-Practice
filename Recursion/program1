#include<bits/stdc++.h>
using namespace std;

// Display the optimal number of moves required to solve Hanoi Tower with number of disks of N

#define countbit(x) __builtin_popcount(x)
#define ll long long


//non dynamic programming
int tower(int n)
{
    if(n == 1)
    {
        return 1;
    }
    else
    {
        int steps = 1;
        steps += tower(n - 1)*2;
        return steps;
    }
}

int dp[50] = {0};

//with dynamic programming (top down)
int tower_dp(int n)
{
    if(n == 1)
    {
        return 1;
    }
    if(dp[n] == 0)
    {
        dp[n] = 1;
        dp[n] += tower_dp(n - 1)*2;
        return dp[n];
    }
    else
    {
        return dp[n];
    }
}

int main()
{
    int t = 1;
    // cin>>t;
    while(t--)
    {
        int n = 0;
        cout<<"Enter the number disks in tower : ";
        cin>>n;
        cout<<"The optimal number of moves are : "<<tower_dp(n);
    }
    return 0;
}
