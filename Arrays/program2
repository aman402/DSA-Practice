#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
#include <bits/stdc++.h>
using namespace __gnu_pbds;
using namespace std;

// Given a binary string (contains only 0's and 1's), count the number
// of substrings which have more 1's than 0's present in them
// O(nlogn) time complexity solution using pbds multiset

typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_multiset;

int main() {
    ordered_multiset myset;
    int current_sum = 0, cnt = 0;
    string s;
    cin >> s;
    myset.insert(0);
    for(int i = 0; i < s.size(); ++i) {
        int digit = s[i] - '0';
        if(digit == 0) {
            current_sum -= 1;
        }
        else {
            current_sum += 1;
        }
        myset.insert(current_sum);
        cnt += myset.order_of_key(current_sum);
    }
    cout << "Number of substrings : " << cnt;
    return 0;
}
